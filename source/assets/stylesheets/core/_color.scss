/* ==========================================================================
//  Global color styles
// -> base colors are set here on global elements, but modules apply their own
// -> refer to colors ONLY via the $theme maps
// ========================================================================== */

/*doc
---
title: Color
name: color
category: core
---

Some functions and globals to keep the color scheme DRY and easy to manage in one place. Color for the entire site is handled through structured SASS maps, assigning each color a role:

```
$themes: (
    'default': (
        'text': (
            'primary'     : $black,
            'secondary'   : $super_dark_purple,
            'tertiary'    : $gray_blue,
            'body'        : $dark_purple,
        ),
        'bg'              : #fff,
        'well'            : $light_gray,
        'border'          : $gray,
        'highlight'       : $highlight--default,
    ),
    // etc.
);

```
You can easily access these colors by "role" with the `theme()` function, like so:

```
.your-module {
    color: theme(text primary);
    background-color: theme(bg);
}
```

If the site has multiple color schemes (say, "default" and "reverse" themes), you can specify the theme by passing in a second parameter:

```
background-color: theme(bg, reverse);
```

The second parameter is optional, and theme() will default to the 'default' theme map.

*/

// Base Palette
// ----------------------------------------------------------------------
// -> PRIVATE, do not use outside this settings file

// neutrals
$black             : #332732;
$super_dark_purple : #4d384b;
$dark_purple       : #665664;
$gray_blue         : #8C9AA7;
$gray              : #DBD9DA;
$light_gray        : #F2F2F2;

// highlights
// -> access with mixin "chapter_highlights()" below
$highlights: (
    'blue'   : #5eabbc,
    'green'  : #5dc0ba,
    'red'    : #f3385a,
    'orange' : #f5a100,
    'purple' : #8d64aa,
);

$highlight--default: map-get($highlights, 'blue');

// Themes
// ----------------------------------------------------------------------
// -> PUBLIC, use these for color references

// note: highlight is default; variations are assigned in local styles
// -> "default": dark text over white. used throughout the main content.
// -> "reverse": light text over dark. used in the footer.
// -> "wash": b/w text over a bright background. used in local navs, billboards.
$themes: (
    'default': (
        'text': (
            'primary'     : $black,
            'secondary'   : $super_dark_purple,
            'tertiary'    : $gray_blue,
            'body'        : $dark_purple,
        ),
        'bg'              : #fff,
        'well'            : $light_gray,
        'border'          : $gray,
        'highlight'       : $highlight--default,
    ),
    'reverse': (
        'text': (
            'primary'     : #fff,
            'secondary'   : $gray,
            'tertiary'    : lighten($super_dark_purple, 35),
            'body'        : $light_gray,
        ),
        'bg'              : $super_dark_purple,
        'well'            : $black,
        'border'          : lighten($super_dark_purple, 10),
        'highlight'       : $highlight--default,
    ),
    'wash': (
        'text': (
            'primary'     : #fff,
            'secondary'   : $black,
            'tertiary'    : $dark_purple,
            'body'        : $dark_purple,
        ),
        'bg'              : $highlight--default,
        'well'            : darken($highlight--default, 5),
        'border'          : darken($highlight--default, 10),
        'highlight'       : #fff,
    )
);

// "get" function to access theme map values
// -> PUBLIC
// -> USAGE:
//      color: theme('text' 'primary');
//      color: theme('highlight', 'reverse');
@function theme($colors, $name: 'default') {
    $map: map-get($themes, $name);
    @each $color in $colors {
        $map: map-get($map, $color);
    }
    @return $map;
}

// "get" function to access a highlight color
// -> PUBLIC
@function highlight($color) {
    @return map-get($highlights, $color);
}

// add all highlight colors for any attributes
// -> PUBLIC
// -> USAGE:
//      single attribute:
//          a { @include highlights(color); }
//      multiple attributes:
//          a { @include highlights(color border-bottom-color); }
// -> NOTE: use after you set your default highlights, or it will be overridden.
@mixin chapter_highlights($attributes: "color") {
    @each $name, $color in $highlights {
        .theme-highlight.#{$name} & {
            @each $attr in $attributes {
                #{$attr}: #{$color};
                // @debug "#{$attr}: #{$color}";
            }
        }
    }
}

// @debug theme('text' 'primary', 'reverse');

// Theme Globals
// ----------------------------------------------------------------------
// -> set up helper classes and base colors

@mixin theme($theme) {
    color: theme('text' 'secondary', $theme);
    background-color: theme('bg', $theme);
    border-color: theme('border', $theme);

    // highlight color when you select something
    ::selection {
      background: theme('highlight', $theme);
      text-shadow: none;
    }

    // ditto, for mozilla engine
    ::-moz-selection {
      background: theme('highlight', $theme);
      text-shadow: none;
    }

    // helper classes
    .well { background: theme('well', $theme); }

    .highlight { color: theme('highlight', $theme); }
}

/* Themes
// -> @extend these to apply a theme to a module
// -------------------------------------------------------------------------- */
body {
    @include theme('default');
}

%theme--reverse {
    @include theme('reverse');
}

%theme--wash {
    @include theme('wash');
}

/* Submodules
// -> create highlight colors for individual chapters
// -------------------------------------------------------------------------- */

