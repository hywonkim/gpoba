/* =============================================================================
// Global layout styles
// ===========================================================================*/

/*doc
---
title: Global layout helpers
name: layout
category: core
---

Global layout styles.

```html_example
<a href="#" class="button l-abs top right">Button @ top right</a>
```

*/

@import "libs";


// Config/mixins
// -----------------------------------------------------------------------------

// --- global breakpoints ------------------------------------------------------
// -> requires Breakpoint library

$breakpoints: (
<% data.site.breakpoints.each do |name, size| %>
    '<%= name %>' : <%= size %>px,
<% end %>
);

// add the breakpoints to Breakpoint library
// -> so we can use 'respond-to' syntax
// -> https://github.com/at-import/breakpoint/wiki/Respond-To
@each $name, $size in $breakpoints {
    @include add-breakpoint($name, $size);
}

// getter/helper function to pull breakpoints from the map
@function screen($size) {
    @return map-get($breakpoints, $size);
    @debug map-get($breakpoints, $size);
}

@include breakpoint-set('to ems', true);

%hide { display: none; }

// screen-size helper classes
.show-small {
    @extend %hide;

    @include respond-to('small') {
        display: block;
    }
}

.show-medium {
    @extend %hide;

    @include respond-to('medium') {
        display: block;
    }
}

// --- global element dimensions -----------------------------------------------
$gutter: fs(4); // based on font scale (see _fonts.scss)
$gutter-outside: fs(6); // based on font scale (see _fonts.scss)
$layout-w: screen('medium'); // max width of main layout
$layout-w--narrow: 680px; // max width of 'narrow' elements (e.g. body type)
$layout-w--wide: 1200px;

@function add_outside_gutters($w) {
    // compensate with for outside margins (ie padding) and split gutters
    @return ($w + ($gutter-outside * 2));
}

%l-base-w {
    max-width: add_outside_gutters($layout-w);
}

%l-base-w--narrow {
    max-width: add_outside_gutters($layout-w--narrow);
}

%l-base-w--wide {
    max-width: add_outside_gutters($layout-w--wide);
}

// --- grid variables ----------------------------------------------------------

// Singularity globals
@include add-gutter($gutter);
// @include add-gutter-style('split' 'fixed');

// scale for ratio-based grids and/or type
// -> http://alistapart.com/article/content-out-layout
$grid-scale: 1 1.618 2.618 4.236 6.854 11.089 17.942 29.030;

@function ms($n) {
    @return nth($grid-scale, $n);
}

// --- default z-indexes -------------------------------------------------------
$z--low    : 0;
$z--middle : 1;
$z--high   : 2;


/* ---- Generic helpers ------------------------------------------------------*/

// hack to make a child element be the full height of its parent
// -> note parent el MUST have overflow: hidden; set.
@mixin l-full-height($padding: 0, $margin: 0) {
    // http://stackoverflow.com/a/25164260
    margin-bottom: ($margin - 1000px);
    padding-bottom: ($padding + 1000px);
}


/* Layout Globals/Base Styles
// ---------------------------------------------------------------------------*/

html {

    // set everything to roll with border-box sizing
    // -> much easier than reg box model
    // -> http://www.paulirish.com/2012/box-sizing-border-box-ftw/
    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}


/* Layout Helper Microclasses
// ---------------------------------------------------------------------------*/

/* ---- Wrappers and columns -------------------------------------------------*/

// basic layout wrapper, for constraining at large screen sizes
.l-wrapper, %l-wrapper {
    @extend %l-base-w;
    @include clearfix;
    display: block;
    position: relative;
    margin-left: auto;
    margin-right: auto;
    padding-left: $gutter-outside;
    padding-right: $gutter-outside;
}

// narrow version of layout wrapper
.l-wrapper.narrow, %l-wrapper--narrow {
    @extend %l-wrapper;
    @extend %l-base-w--narrow;
}

.l-wrapper.wide, %l-wrapper--wide {
    @extend %l-wrapper;
    @extend %l-base-w--wide;
}

/* https://css-tricks.com/NetMag/FluidWidthVideo/Article-FluidWidthVideo.php */
.l-wrapper-video {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    padding-top: 25px;
    height: 0;

    & > iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

/* ---- Fixed position -------------------------------------------------------*/

@mixin scroll($axis: y) {
    overflow: auto;

    @if ($axis == y) {
        overflow-x: hidden;
        overflow-y: auto;
    } @elseif ($axis == x) {
        overflow-x: auto;
        overflow-y: hidden;
    }
}

%scroll-y {
    @include scroll(y);
}

%scroll-x {
    @include scroll(x);
}

// fix an element and make it full-height or full-width
.l-fixed, %l-fixed {
    position: fixed;

    &.full-h, %l-fixed--full-h {
        @extend %scroll-y;
        top: 0;
        bottom: 0;
    }
    &.full-w, %l-fixed--full-w {
        @extend %scroll-x;
        left: 0;
        right: 0;
    }
}

/* ---- Absolute Positioning -------------------------------------------------*/

// position an element absolutely in the left, right, top or bottom.
// -> parent element MUST have explicit positioning
.l-abs, %l-abs {
    position: absolute;

    // MODIFIERS:
    // .left, .right, .top, .bottom

    $sides: left right top bottom;
    @for $i from 1 through length($sides) {
        $side: nth($sides, $i);

        &.#{$side} {
            #{$side}: 0;
            margin-#{$side}: gutters();
        }
    }
}

/* ---- Floats ---------------------------------------------------------------*/

// float an element left or right
.l-float, %l-float {
    &.left {
        float: left;
    }
    &.right {
        float: right;
    }
}

/* ---- Visibility -----------------------------------------------------------*/

@mixin visually_hidden($focusable: false) {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    /*
     * Extends the .visuallyhidden class to allow the element
     * to be focusable when navigated to via the keyboard:
     * https://www.drupal.org/node/897638
     */
    @if ($focusable == true) {
        &:active,
        &:focus {
            clip: auto;
            height: auto;
            margin: 0;
            overflow: visible;
            position: static;
            width: auto;
        }
    }
}

